# 1. TYPE: VIEW ENTITY

Used to expose a subset of fields from a root view entity. Used in RAP for the projection layer.

Mandatory annotations whenever define view entity TYPE
CDS view is created:
@AccessControl.authorizationCheck: #CHECK
@ObjectModel: {
   usageType: {
      dataClass:          #TRANSACTIONAL,
      serviceQuality:     #C,
      sizeCategory:       #XL
    }
}
@EndUserText.label: '<meaningful description>'
@Metadata.allowExtensions: true
@VDM.viewType: #CONSUMPTION
@Search.searchable: true

#2. TYPE: ROOT VIEW ENTITY
Defines the root business object for RAP BO. Used as the main data model with composition, keys, and transactional behavior.

Mandatory annotations whenever define root view entity TYPE
CDS view is created:
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: '<meaningful description>'
@Metadata.allowExtensions: true
@Metadata.ignorePropagatedAnnotations: true

EXAMPLE:
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Sales Order Root Entity'
@Metadata.allowExtensions: true
@Metadata.ignorePropagatedAnnotations: true
define root view entity ZSO_Header
      SalesOrganization,
      DistributionChannel
}; as select from I_SalesOrder
{
  key SalesOrder as SalesOrder,
      SalesOrderType,
 
#3. TYPE: PROJECTION VIEW ENTITY
Used to expose a subset of fields from a root view entity. Used in RAP for the projection layer.

Mandatory annotation when projection view entity needs to be created:
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: '<Projection view label>'

EXAMPLE:
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Sales Order Projection'
define view entity ZSO_Projection
  as projection on ZSO_Header
{
  key SalesOrder,
      SalesOrderType,
      SalesOrganization
};


#4. TYPE: ANALYTICAL CUBE
PURPOSE:
Used for analytical reporting and exposed to BW or SAC.

Use below annotations for analytical cube CDS view
@Analytics.dataCategory: #CUBE
@EndUserText.label: '<Analytical View>'
@AccessControl.authorizationCheck: #CHECK

EXAMPLE:
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Analytical Cube'
@Analytics.dataCategory: #CUBE
define view entity C_ProfitCube
  as select from I_ProfitCenter
{
  key ProfitCenter,
      CompanyCode,
      ProfitAmount
};

#5. NAMING BEST PRACTICE

Prefix with module
Limit total name length â‰¤ 30 characters.
Avoid special characters or reserved words.

#6. 
Place annotation just above the Define view

#7. General Instruction for creating CDS
- While creating CDS between two or more table use association along with cardianality instead of inner joins 
- Do not create SQL view name type CDS

#8. General instructions for Value help CDS
If the following Value Help CDS entity exists, use it in the main CDS as an **association**:
- Value Help Entity Name: {value_help_entity or "None provided"}
- Purpose: {value_help_purpose or "N/A"}

ðŸš« Do NOT use @ObjectModel.valueHelpDefinition or @UI.valueHelp annotations.
âœ… Instead, create a CDS association like this:
    association [0..1] to {value_help_entity} as _{(value_help_entity or "VH").lower()}
        on _{(value_help_entity or "VH").lower()}.<key_field> = <main_field>

Include this association in the projection list (e.g., "_{(value_help_entity or 'VH').lower()}").
Ensure the CDS syntax is RAP-compatible and activation-ready.

EXAMPLE:
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Sales Order Projection'
define view entity ZSO_Projection
  as projection on ZSO_Header
  association [0..1] to ZVH_Customer as _Customer
      on _Customer.Customer = Customer
{
  key SalesOrder,
  Customer,
  //Make association public
  _Customer
  
}
